{"version":3,"sources":["../../src/controllers/contact.controller.js"],"names":["ContactModel","require","spValidate","ContactController","receiveDatasForm","req","res","body","firstName","lastName","email","phoneNumber","company","role","message","errors","isLength","isEmpty","isEmail","isPhone","Object","keys","length","json","contact","save","then","data","err"],"mappings":"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","sourcesContent":["const ContactModel = require('../models/Contact.model');\nconst spValidate = require('sp-validate')\n\n\nexport  const ContactController = {\n   async receiveDatasForm(req, res) {\n         const { \n             firstName, \n             lastName, \n             email,\n             phoneNumber,\n             company,\n             role,\n             message\n             \n         } = req.body;\nlet errors = {};\n\n\n\n\nif(spValidate.isLength(firstName, 3)) {\n    errors.firstName = 'Your FirstName is very short'\n}\n\nif(spValidate.isEmpty(firstName)) {\n    errors.firstName = 'FirstName must not be empty'\n}\n\n\n\nif(spValidate.isLength(lastName,3)) {\n    errors.lastName = 'Your lastName is very short'\n}\n\nif(spValidate.isEmpty(lastName)) {\n    errors.lastName = 'lastName must not be empty'\n}\n\n\nif(!spValidate.isEmail(email)) {\n    errors.email = 'email must be valid'\n}\n\n\n\nif(spValidate.isLength(email)) {\n    errors.email = 'Your email is very short'\n}\n\nif(spValidate.isEmpty(email)) {\n    errors.email = 'email must not be empty'\n}\n\n\nif(spValidate.isLength(company, 3)) {\n    errors.company = 'Your company is very short'\n}\n\nif(spValidate.isEmpty(company)) {\n    errors.company = 'company must not be empty'\n}\n\n\nif(spValidate.isLength(role, 3)) {\n    errors.role = 'Your role is very short'\n}\n\nif(spValidate.isEmpty(role)) {\n    errors.role = 'role must not be empty'\n}\n\n\nif(spValidate.isLength(message, 100)) {\n    errors.message = 'Your message is very short'\n}\n\nif(spValidate.isEmpty(message)) {\n    errors.message = 'message must not be empty'\n}\n\nif(spValidate.isPhone(phoneNumber)) {\n    errors.phoneNumber = 'Your phoneNumber must be valid'\n}\n\nif(spValidate.isLength(phoneNumber, 9)) {\n    errors.phoneNumber = 'Your phoneNumber is very short'\n}\n\nif(spValidate.isEmpty(phoneNumber)) {\n    errors.phoneNumber = 'phoneNumber must not be empty'\n}\n\nif(Object.keys(errors).length > 0 ) {\n    return res.json(errors)\n}\n\n\n         const contact = new ContactModel({\n            firstName, \n            lastName, \n            email,\n            phoneNumber,\n            company,\n            role,\n            message\n         });\n\n       await contact.save()\n       .then(data => {\n           return res.json(data)\n       }).catch(err => {\n           return res.json(err)\n       })\n    }\n}"],"file":"contact.controller.js"}