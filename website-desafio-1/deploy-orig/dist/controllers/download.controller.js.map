{"version":3,"sources":["../../src/controllers/download.controller.js"],"names":["EmailModel","require","nodemailer","spValidate","DownloadModel","DownloadController","sendEmail","req","res","body","email","firstName","lastName","company","role","website","errors","isEmail","isLength","isEmpty","Object","keys","length","json","transporter","createTransport","service","host","port","auth","user","pass","download","save","then","sendMail","from","to","subject","html","success","err"],"mappings":";;;;;;;;;;;AAAA,IAAMA,UAAU,GAAGC,OAAO,CAAC,0BAAD,CAA1B;;AACA,IAAMC,UAAU,GAAGD,OAAO,CAAC,YAAD,CAA1B;;AACA,IAAME,UAAU,GAAGF,OAAO,CAAC,aAAD,CAA1B;;AACA,IAAMG,aAAa,GAAGH,OAAO,CAAC,0BAAD,CAA7B;;AAGO,IAAOI,kBAAkB,GAAG;AAC3BC,EAAAA,SAD2B,qBACjBC,GADiB,EACZC,GADY,EACP;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,0BACqCD,GAAG,CAACE,IADzC,EAClBC,KADkB,aAClBA,KADkB,EACXC,SADW,aACXA,SADW,EACAC,QADA,aACAA,QADA,EACUC,OADV,aACUA,OADV,EACmBC,IADnB,aACmBA,IADnB,EACyBC,OADzB,aACyBA,OADzB;AAGtBC,cAAAA,MAHsB,GAGb,EAHa;;AAM3B,kBAAG,CAACb,UAAU,CAACc,OAAX,CAAmBP,KAAnB,CAAJ,EAA+B;AACfM,gBAAAA,MAAM,CAACN,KAAP,GAAe,qBAAf;AAEhB;;AAGD,kBAAGP,UAAU,CAACe,QAAX,CAAoBP,SAApB,EAA+B,CAA/B,CAAH,EAAsC;AAClCK,gBAAAA,MAAM,CAACL,SAAP,GAAmB,8BAAnB;AACH;;AAGD,kBAAGR,UAAU,CAACgB,OAAX,CAAmBR,SAAnB,CAAH,EAAkC;AAC9BK,gBAAAA,MAAM,CAACL,SAAP,GAAmB,8BAAnB;AACH;;AAED,kBAAGR,UAAU,CAACe,QAAX,CAAoBN,QAApB,EAA8B,CAA9B,CAAH,EAAqC;AACjCI,gBAAAA,MAAM,CAACJ,QAAP,GAAkB,6BAAlB;AACH;;AAED,kBAAGT,UAAU,CAACgB,OAAX,CAAmBP,QAAnB,CAAH,EAAiC;AAC7BI,gBAAAA,MAAM,CAACJ,QAAP,GAAkB,6BAAlB;AACH;;AAED,kBAAGT,UAAU,CAACe,QAAX,CAAoBL,OAApB,EAA6B,CAA7B,CAAH,EAAoC;AAChCG,gBAAAA,MAAM,CAACH,OAAP,GAAiB,gCAAjB;AACH;;AAED,kBAAGV,UAAU,CAACgB,OAAX,CAAmBN,OAAnB,CAAH,EAAgC;AAC5BG,gBAAAA,MAAM,CAACH,OAAP,GAAiB,gCAAjB;AACH;;AAED,kBAAGV,UAAU,CAACe,QAAX,CAAoBJ,IAApB,EAA0B,CAA1B,CAAH,EAAiC;AAC7BE,gBAAAA,MAAM,CAACF,IAAP,GAAc,6BAAd;AACH;;AACD,kBAAGX,UAAU,CAACgB,OAAX,CAAmBL,IAAnB,CAAH,EAA6B;AACzBE,gBAAAA,MAAM,CAACF,IAAP,GAAc,wBAAd;AACH;;AAED,kBAAGX,UAAU,CAACe,QAAX,CAAoBH,OAApB,EAA6B,CAA7B,CAAH,EAAoC;AAChCC,gBAAAA,MAAM,CAACD,OAAP,GAAiB,gCAAjB;AACH;;AAED,kBAAGZ,UAAU,CAACgB,OAAX,CAAmBJ,OAAnB,CAAH,EAAgC;AAC5BC,gBAAAA,MAAM,CAACD,OAAP,GAAiB,2BAAjB;AACH;;AAlD2B,oBAoDzBK,MAAM,CAACC,IAAP,CAAYL,MAAZ,EAAoBM,MAApB,GAA6B,CApDJ;AAAA;AAAA;AAAA;;AAAA,gDAqDjBd,GAAG,CAACe,IAAJ,CAASP,MAAT,CArDiB;;AAAA;AAyDnBQ,cAAAA,WAzDmB,GAyDLtB,UAAU,CAACuB,eAAX,CAA2B;AAChDC,gBAAAA,OAAO,EAAE,OADuC;AAEhDC,gBAAAA,IAAI,EAAE,gBAF0C;AAGhDC,gBAAAA,IAAI,EAAG,GAHyC;AAIhDC,gBAAAA,IAAI,EAAE;AACJC,kBAAAA,IAAI,EAAE,yBADF;AAEJC,kBAAAA,IAAI,EAAE;AAFF;AAJ0C,eAA3B,CAzDK;AAuEVC,cAAAA,QAvEU,GAuEC,IAAI5B,aAAJ,CAAkB;AAC/BM,gBAAAA,KAAK,EAALA,KAD+B;AACxBC,gBAAAA,SAAS,EAATA,SADwB;AACbC,gBAAAA,QAAQ,EAARA,QADa;AACHC,gBAAAA,OAAO,EAAPA,OADG;AACMC,gBAAAA,IAAI,EAAJA,IADN;AACYC,gBAAAA,OAAO,EAAPA;AADZ,eAAlB,CAvED;AAAA;AAAA,qBA2EXiB,QAAQ,CAACC,IAAT,GAAgBC,IAAhB,uEAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACpBV,WAAW,CAACW,QAAZ,CAAqB;AACvBC,0BAAAA,IAAI,yDADmB;AAEvBC,0BAAAA,EAAE,EAAE3B,KAFmB;AAGvB4B,0BAAAA,OAAO,EAAE,iCAHc;AAKvBC,0BAAAA,IAAI,sBAAe5B,SAAf;AALmB,yBAArB,EAmBHuB,IAnBG,CAmBE,YAAM;AACV,iCAAO1B,GAAG,CAACe,IAAJ,CAAS;AAACiB,4BAAAA,OAAO,EAAE;AAAV,2BAAT,CAAP;AACH,yBArBK,WAqBG,UAAAC,GAAG,EAAI;AACZ,iCAAOjC,GAAG,CAACe,IAAJ,CAASkB,GAAT,CAAP;AACH,yBAvBK,CADoB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAArB,GA3EW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsGzB;AAvGgC,CAA5B","sourcesContent":["const EmailModel = require('../models/Download.model')\nconst nodemailer = require('nodemailer');\nconst spValidate = require('sp-validate');\nconst DownloadModel = require('../models/Download.model');\n\n\nexport const  DownloadController = {\n  async sendEmail(req, res) {\n   const {email, firstName, lastName, company, role, website } = req.body;\n   \n  let errors = {};\n\n\n if(!spValidate.isEmail(email)) {\n                 errors.email = 'Email must be valid'\n\n}\n\n\nif(spValidate.isLength(firstName, 3)) {\n    errors.firstName = 'Your first name is too short'\n}\n\n\nif(spValidate.isEmpty(firstName)) {\n    errors.firstName = 'First name must not be empty'\n}\n\nif(spValidate.isLength(lastName, 3)) {\n    errors.lastName = 'Your last name is too short'\n}\n\nif(spValidate.isEmpty(lastName)) {\n    errors.lastName = 'Last name must not be empty'\n}\n\nif(spValidate.isLength(company, 2)) {\n    errors.company = 'Your company name is too short'\n}\n\nif(spValidate.isEmpty(company)) {\n    errors.company = 'Company name must not be empty'\n}\n\nif(spValidate.isLength(role, 3)) {\n    errors.role = 'Your role name is too short'\n}\nif(spValidate.isEmpty(role)) {\n    errors.role = 'Role must not be empty'\n}\n\nif(spValidate.isLength(website, 3)) {\n    errors.website = 'Your website url  is too short'\n}\n\nif(spValidate.isEmpty(website)) {\n    errors.website = 'Website must not be empty'\n}\n\nif(Object.keys(errors).length > 0 ) {\n    return res.json(errors)\n}\n\n\n   const transporter = nodemailer.createTransport({\n  service: 'gmail',\n  host: 'smtp.gmail.com',\n  port:  993,\n  auth: {\n    user: 'jaimeinoque20@gmail.com',\n    pass: 'Jovyta@jaime1996'\n  }\n   });\n  \n           \n\n           \n\n            const download = new DownloadModel({\n                email, firstName, lastName, company, role, website \n            });\n\n           await download.save().then(async () => {\n            await transporter.sendMail({\n                from: `Francisco Inoque - noreply<mycv@franciscoinoque.tech>`,\n                to: email,\n                subject: 'Thank you for downloading my CV',\n                \n                html: `<h1>Hello ${firstName}</h1>\n                <br>\n                <br>\n                <strong>Here is Francisco, to download my CV just click on the link: </strong><br>\n                <a href=\"https://drive.google.com/file/d/19gvFFGESD5Fk9j3XF9NfEW6oU7AYSw79/view?usp=sharing\">Click me!</a>\n                \n                <h3>Contacts: </h3>\n                <ul>\n                <li>Skype: <span style=\"color: #8e2ddd\">tchessico@live.com</span> </li>\n                <li>Email: <span style=\"color: #8e2ddd\">jaimeinoque20@gmail.com</span> </li>\n                </ul>\n                \n                `\n         \n            }).then(() => {\n                return res.json({success: 'Your message sent successfully'})\n            }).catch(err => {\n                return res.json(err)\n            })\n           })\n  \n  }\n}"],"file":"download.controller.js"}